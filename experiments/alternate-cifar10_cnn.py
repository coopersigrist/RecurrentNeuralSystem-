# -*- coding: utf-8 -*-
"""ReNS experiments - CIFAR10 [conv]

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WwT0q8ojrAJ4zHy82CK4ST2iZ-gmLsAu

# SETUP
"""

#@title Insatlling Pyorch

# !pip install torch
# !pip install torchvision

#@title Import Dependencies
import numpy as np
import torch
import torch.nn as nn
import torchvision.datasets as dsets
import torchvision.transforms as transforms
from torch.autograd import Variable
from tqdm import tqdm
from typing import Optional, Union, Tuple, List, Sequence, Iterable
import math
from scipy.spatial.distance import euclidean
from torch.nn.modules.utils import _pair
from torchvision import models
from sklearn.metrics import jaccard_score
from models.exp_cnn_models import *
import matplotlib.pyplot as plt

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
# plt.rcParams['figure.figsize'] = (10.0, 8.0) # set default size of plots
# plt.rcParams['image.interpolation'] = 'nearest'
# plt.rcParams['image.cmap'] = 'gray'

# for auto-reloading external modules
# see http://stackoverflow.com/questions/1907993/autoreload-of-modules-in-ipython
# %load_ext autoreload
# %autoreload 2

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print("Device:", device)

"""# TRAINING"""

# Hyperparams
batch_size = 64
num_epochs = 10
reflexor_size = 10
image_size = 32
channels = 3

# Transform FashionMNIST to same input shape as CIFAR10
transform = transforms.Compose([transforms.Grayscale(num_output_channels=3),
                                transforms.Resize((32, 32)),
                                transforms.ToTensor()])

# Load data.
cifar_train_data = dsets.CIFAR10(root = './data', train = True,
                        transform = transforms.ToTensor(), download = True)

cifar_test_data = dsets.CIFAR10(root = './data', train = False,
                       transform = transforms.ToTensor())

fmnist_train_data = dsets.FashionMNIST(root = './data', train = True,
                        transform = transform, download = True)

fmnist_test_data = dsets.FashionMNIST(root = './data', train = False,
                       transform = transform)

cifar_train_gen = torch.utils.data.DataLoader(dataset = cifar_train_data,
                                             batch_size = batch_size,
                                             shuffle = True)

cifar_test_gen = torch.utils.data.DataLoader(dataset = cifar_test_data,
                                      batch_size = batch_size,
                                      shuffle = False)

fmnist_train_gen = torch.utils.data.DataLoader(dataset = fmnist_train_data,
                                             batch_size = batch_size,
                                             shuffle = True)

fmnist_test_gen = torch.utils.data.DataLoader(dataset = fmnist_test_data,
                                      batch_size = batch_size,
                                      shuffle = False)

train_data = [cifar_train_data, fmnist_train_data]
test_data  = [cifar_test_data, fmnist_test_data]
train_gens = [cifar_train_gen, fmnist_train_gen]
test_gens  = [cifar_test_gen, fmnist_test_gen]
dataset_names = ['CIFAR10', 'FashionMNIST']

# MODELS
encoder1 = PreReflexorConvEncoder(reflexor_size).to(device)
decoder1 = ConvolutionalDecoder(reflexor_size).to(device)
reflexor1 = Reflexor(reflexor_size).to(device)
classifier1 = ConvolutionalEncoderClassifier(reflexor_size, 10).to(device)
auto_params1 = list(encoder1.parameters()) + list(reflexor1.parameters()) + list(decoder1.parameters())
class_params1 = list(encoder1.parameters()) + list(reflexor1.parameters()) + list(classifier1.parameters())

encoder2 = PreReflexorConvEncoder(reflexor_size).to(device)
decoder2 = ConvolutionalDecoder(reflexor_size).to(device)
reflexor2 = Reflexor(reflexor_size).to(device)
mod = PreReflexorConvEncoderModulator(reflexor_size).to(device)
classifier2 = ConvolutionalEncoderClassifier(reflexor_size, 10).to(device)
auto_params2 = list(encoder2.parameters()) + list(reflexor2.parameters()) + list(mod.parameters()) + list(decoder2.parameters())
class_params2 = list(mod.parameters()) + list(reflexor2.parameters()) + list(classifier2.parameters())

# Baseline model
net1 = [encoder1, reflexor1, None, decoder1, classifier1, auto_params1, class_params1]
# Modulated model
net2 = [encoder2, reflexor2, mod, decoder2, classifier2, auto_params2, class_params2]

lr = 1e-5 # size of step
loss_function = nn.MSELoss()

# Unnormalize the image to display it
def img_fix(img):
  return np.transpose((img.cpu()).numpy(), (1, 2, 0))

# Commented out IPython magic to ensure Python compatibility.
auto_train_losses = []
auto_test_losses = []
class_train_losses = []
class_test_losses = []
first_task_losses = [[], []]
first_task_steps = [[], []]
steps = []

real_imgs = [[],[]]
reconstructed_imgs = [[],[]]

param_counts = np.ones(2)

for epoch in range(num_epochs):
    for dset_idx, train_gen in enumerate(train_gens):
        print('Dataset:', dataset_names[dset_idx])
        if(epoch == 0):
            auto_train_losses.append([])
            auto_test_losses.append([])
            class_train_losses.append([])
            class_test_losses.append([])
            steps.append([])

        for num, net in enumerate([net1, net2]):
          encoder, reflexor, mod, decoder, classifier, auto_params, class_params = net

          autoencoder_optimizer = torch.optim.Adam(auto_params, lr=lr)
          classifier_optimizer = torch.optim.Adam(class_params, lr=lr)
          param_counts[num] = (sum(p.numel() for p in auto_params if p.requires_grad))

          if(epoch == 0):
              auto_train_losses[dset_idx].append([])
              auto_test_losses[dset_idx].append([])
              class_train_losses[dset_idx].append([])
              class_test_losses[dset_idx].append([])
              steps[dset_idx].append([])

          for i, (images, labels) in enumerate(train_gen):

            images = images.to(device)

            autoencoder_optimizer.zero_grad()
            classifier_optimizer.zero_grad()

            # Generate encoded features
            encoded = encoder(images)
            if(mod != None):
                encoded = encoded * mod(images)
            compressed = reflexor(encoded)

            # Backprop autoencoder
            decoded = decoder(compressed)
            decoder_loss = loss_function(decoded, images)
            decoder_loss.backward(retain_graph=True)

            # Backprop classifier
            outputs = classifier(compressed)
            # outputs = classifier(encoded.detach())
            labels = torch.nn.functional.one_hot(labels, num_classes=10).type(torch.FloatTensor).to(device)
            output_loss = loss_function(outputs, labels)
            output_loss.backward()

            # Update weights
            classifier_optimizer.step()
            autoencoder_optimizer.step()

            # Train neuromodulator + encoder on previous dataset if on new dataset
            # if(dset_idx != 0 and (i+1) % 200 == 0):
            #   for first_images, first_labels in train_gens[0]:
            #     first_images = first_images.to(device)
            #     first_decoded = decoder(encoder(first_images))
            #     first_decoder_loss = loss_function(first_decoded, first_images)
            #     first_decoder_loss.backward()
            #     autoencoder_optimizer.step()

            if (i+1) % 300 == 0:
              # Output and save current model task loss
              auto_loss = decoder_loss.item()
              class_loss = output_loss.item()

              print('Epoch [%d/%d], Step [%d/%d], class_loss: %.4f, auto_loss: %.4f,' \
                         %(epoch+1, num_epochs, i+1, len(train_data[dset_idx])//batch_size, class_loss, auto_loss))

              auto_train_losses[dset_idx][num].append(auto_loss)
              class_train_losses[dset_idx][num].append(class_loss)
              steps[dset_idx][num].append((50000 * epoch) + ((i + 1) * batch_size))

              # TEST DATA
              # First task accuracy (CIFAR)
              score = 0
              total = 0
              for images, labels in test_gens[0]:
                images = images.to(device)
                labels = labels.to(device)

                encoded = encoder(images)
                if(mod != None):
                    encoded = encoded * mod(images)
                compressed = reflexor(encoded)

                output = classifier(compressed)
                labels = torch.nn.functional.one_hot(labels, num_classes=10).type(torch.FloatTensor).to(device)
                score += loss_function(output, labels).item()
                total += 1
              first_task_losses[num].append((score / total))

              # Calculate train loss for image generation
              score = 0
              total = 0
              for images, labels in test_gens[dset_idx]:
                images = images.to(device)

                encoded = encoder(images)
                if(mod != None):
                    encoded = encoded * mod(images)
                compressed = reflexor(encoded)

                output = decoder(compressed)
                score += loss_function(output, images).item()
                total += 1
              auto_test_losses[dset_idx][num].append((score / total))

              # Calculate train loss for image classification
              score = 0
              total = 0
              for images, labels in test_gens[dset_idx]:
                images = images.to(device)
                labels = labels.to(device)

                encoded = encoder(images)
                if(mod != None):
                    encoded = encoded * mod(images)
                compressed = reflexor(encoded)

                output = classifier(compressed)
                labels = torch.nn.functional.one_hot(labels, num_classes=10).type(torch.FloatTensor).to(device)
                score += loss_function(output, labels).item()
                total += 1
              class_test_losses[dset_idx][num].append((score / total))

              # Optionally show images
              # dupe = Variable(decoded[0].data, requires_grad=False)
              # plt.imshow(img_fix(images[0]))
              # plt.show()
              # plt.imshow(img_fix(dupe))
              # plt.show()

              # Add images to show at the end
              # real_imgs[num].append(img_fix(images[0].clone()))
              # reconstructed_imgs[num].append(img_fix(dupe.clone()))


for dset_idx, data in enumerate(train_data):
    plt.plot(steps[dset_idx][0], auto_train_losses[dset_idx][0], label= "Baseline")
    plt.plot(steps[dset_idx][1], auto_train_losses[dset_idx][1], label= "Modulated")
    plt.xlabel('Iteration')
    plt.ylabel('Loss')
    plt.title('Autoencoder training loss history, Dataset: ' + dataset_names[dset_idx])
    plt.legend()
    plt.show()

for dset_idx, data in enumerate(train_data):
    plt.plot(steps[dset_idx][0], class_train_losses[dset_idx][0], label= "Baseline")
    plt.plot(steps[dset_idx][1], class_train_losses[dset_idx][1], label= "Modulated")
    plt.xlabel('Iteration')
    plt.ylabel('Loss')
    plt.title('Classification training loss history, Dataset: ' + dataset_names[dset_idx])
    plt.legend()
    plt.show()

for dset_idx, data in enumerate(train_data):
    plt.plot(steps[dset_idx][0], auto_test_losses[dset_idx][0], label= "Baseline")
    plt.plot(steps[dset_idx][1], auto_test_losses[dset_idx][1], label= "Modulated")
    plt.xlabel('Iteration')
    plt.ylabel('Loss')
    plt.title('Autoencoder test loss history, Dataset: ' + dataset_names[dset_idx])
    plt.legend()
    plt.show()

for dset_idx, data in enumerate(train_data):
    plt.plot(steps[dset_idx][0], class_test_losses[dset_idx][0], label= "Baseline")
    plt.plot(steps[dset_idx][1], class_test_losses[dset_idx][1], label= "Modulated")
    plt.xlabel('Iteration')
    plt.ylabel('Loss')
    plt.title('Classification test loss history, Dataset: ' + dataset_names[dset_idx])
    plt.legend()
    plt.show()

first_task_steps[0] = np.arange(len(first_task_losses[0]))
first_task_steps[1] = np.arange(len(first_task_losses[1]))
plt.plot(first_task_steps[0], first_task_losses[0], label= "Baseline")
plt.plot(first_task_steps[1], first_task_losses[1], label= "Modulated")
plt.xlabel('Iteration')
plt.ylabel('Loss')
plt.title('First task classification loss history, Dataset: CIFAR10')
plt.legend()
plt.show()

for num,count in enumerate(param_counts):
  param_counts[num] /= 1000

plt.bar(["Base", "Modulated"], param_counts)
plt.xlabel('Model')
plt.ylabel('# of thousands of Parameters')
plt.show()

# from mpl_toolkits.axes_grid1 import ImageGrid
#
# num_smaples = len(real_imgs[0])
#
#
# for num in [0, 1]:
#   fig = plt.figure(figsize=(20.,20.))
#   grid = ImageGrid(fig, 111,  # similar to subplot(111)
#                   nrows_ncols=(2, num_smaples),  # creates 2x2 grid of axes
#                   axes_pad=0.1,  # pad between axes in inch.
#                   )
#
#   for ax, im in zip(grid, real_imgs[num]+reconstructed_imgs[num]):
#       # Iterating over the grid returns the Axes.
#       ax.imshow(im)
#       ax.axis("off")
#
#   plt.show()
